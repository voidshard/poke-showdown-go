// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1624af22DecodeGithubComVoidshardPokeShowdownGoPkgStructs(in *jlexer.Lexer, out *BattleSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Format":
			out.Format = Format(in.String())
		case "Players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([][]*PokemonSpec, 0, 2)
					} else {
						out.Players = [][]*PokemonSpec{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v1 []*PokemonSpec
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]*PokemonSpec, 0, 8)
							} else {
								v1 = []*PokemonSpec{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 *PokemonSpec
							if in.IsNull() {
								in.Skip()
								v2 = nil
							} else {
								if v2 == nil {
									v2 = new(PokemonSpec)
								}
								(*v2).UnmarshalEasyJSON(in)
							}
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Players = append(out.Players, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Seed":
			out.Seed = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1624af22EncodeGithubComVoidshardPokeShowdownGoPkgStructs(out *jwriter.Writer, in BattleSpec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Format\":"
		out.RawString(prefix[1:])
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"Players\":"
		out.RawString(prefix)
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Players {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4 {
						if v5 > 0 {
							out.RawByte(',')
						}
						if v6 == nil {
							out.RawString("null")
						} else {
							(*v6).MarshalEasyJSON(out)
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Seed\":"
		out.RawString(prefix)
		out.Int(int(in.Seed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BattleSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1624af22EncodeGithubComVoidshardPokeShowdownGoPkgStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BattleSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1624af22EncodeGithubComVoidshardPokeShowdownGoPkgStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BattleSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1624af22DecodeGithubComVoidshardPokeShowdownGoPkgStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BattleSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1624af22DecodeGithubComVoidshardPokeShowdownGoPkgStructs(l, v)
}
