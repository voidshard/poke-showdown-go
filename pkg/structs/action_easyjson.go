// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC83507a6DecodeGithubComVoidshardPokeShowdownGoPkgStructs(in *jlexer.Lexer, out *ActionSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ActionType(in.String())
		case "id":
			out.ID = int(in.Int())
		case "target":
			out.Target = int(in.Int())
		case "pass":
			out.Pass = bool(in.Bool())
		case "mega":
			out.Mega = bool(in.Bool())
		case "zmove":
			out.ZMove = bool(in.Bool())
		case "max":
			out.Max = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC83507a6EncodeGithubComVoidshardPokeShowdownGoPkgStructs(out *jwriter.Writer, in ActionSpec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		out.Int(int(in.Target))
	}
	{
		const prefix string = ",\"pass\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pass))
	}
	{
		const prefix string = ",\"mega\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mega))
	}
	{
		const prefix string = ",\"zmove\":"
		out.RawString(prefix)
		out.Bool(bool(in.ZMove))
	}
	{
		const prefix string = ",\"max\":"
		out.RawString(prefix)
		out.Bool(bool(in.Max))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActionSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC83507a6EncodeGithubComVoidshardPokeShowdownGoPkgStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActionSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC83507a6EncodeGithubComVoidshardPokeShowdownGoPkgStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActionSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC83507a6DecodeGithubComVoidshardPokeShowdownGoPkgStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActionSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC83507a6DecodeGithubComVoidshardPokeShowdownGoPkgStructs(l, v)
}
func easyjsonC83507a6DecodeGithubComVoidshardPokeShowdownGoPkgStructs1(in *jlexer.Lexer, out *Action) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "player":
			out.Player = string(in.String())
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Specs = nil
			} else {
				in.Delim('[')
				if out.Specs == nil {
					if !in.IsDelim(']') {
						out.Specs = make([]*ActionSpec, 0, 8)
					} else {
						out.Specs = []*ActionSpec{}
					}
				} else {
					out.Specs = (out.Specs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ActionSpec
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ActionSpec)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Specs = append(out.Specs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC83507a6EncodeGithubComVoidshardPokeShowdownGoPkgStructs1(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"player\":"
		out.RawString(prefix[1:])
		out.String(string(in.Player))
	}
	{
		const prefix string = ",\"spec\":"
		out.RawString(prefix)
		if in.Specs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Specs {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Action) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC83507a6EncodeGithubComVoidshardPokeShowdownGoPkgStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Action) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC83507a6EncodeGithubComVoidshardPokeShowdownGoPkgStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Action) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC83507a6DecodeGithubComVoidshardPokeShowdownGoPkgStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Action) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC83507a6DecodeGithubComVoidshardPokeShowdownGoPkgStructs1(l, v)
}
