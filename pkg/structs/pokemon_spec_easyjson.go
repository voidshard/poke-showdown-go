// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC3e64b9bDecodeGithubComVoidshardPokeShowdownGoPkgStructs(in *jlexer.Lexer, out *StatValues) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hp":
			out.HP = int(in.Int())
		case "atk":
			out.Attack = int(in.Int())
		case "def":
			out.Defense = int(in.Int())
		case "spa":
			out.SpecialAttack = int(in.Int())
		case "spd":
			out.SpecialDefense = int(in.Int())
		case "spe":
			out.Speed = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3e64b9bEncodeGithubComVoidshardPokeShowdownGoPkgStructs(out *jwriter.Writer, in StatValues) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hp\":"
		out.RawString(prefix[1:])
		out.Int(int(in.HP))
	}
	{
		const prefix string = ",\"atk\":"
		out.RawString(prefix)
		out.Int(int(in.Attack))
	}
	{
		const prefix string = ",\"def\":"
		out.RawString(prefix)
		out.Int(int(in.Defense))
	}
	{
		const prefix string = ",\"spa\":"
		out.RawString(prefix)
		out.Int(int(in.SpecialAttack))
	}
	{
		const prefix string = ",\"spd\":"
		out.RawString(prefix)
		out.Int(int(in.SpecialDefense))
	}
	{
		const prefix string = ",\"spe\":"
		out.RawString(prefix)
		out.Int(int(in.Speed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatValues) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3e64b9bEncodeGithubComVoidshardPokeShowdownGoPkgStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatValues) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3e64b9bEncodeGithubComVoidshardPokeShowdownGoPkgStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatValues) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3e64b9bDecodeGithubComVoidshardPokeShowdownGoPkgStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatValues) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3e64b9bDecodeGithubComVoidshardPokeShowdownGoPkgStructs(l, v)
}
func easyjsonC3e64b9bDecodeGithubComVoidshardPokeShowdownGoPkgStructs1(in *jlexer.Lexer, out *PokemonSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "species":
			out.Species = string(in.String())
		case "item":
			out.Item = string(in.String())
		case "ability":
			out.Ability = string(in.String())
		case "moves":
			if in.IsNull() {
				in.Skip()
				out.Moves = nil
			} else {
				in.Delim('[')
				if out.Moves == nil {
					if !in.IsDelim(']') {
						out.Moves = make([]string, 0, 4)
					} else {
						out.Moves = []string{}
					}
				} else {
					out.Moves = (out.Moves)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Moves = append(out.Moves, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nature":
			out.Nature = string(in.String())
		case "evs":
			if in.IsNull() {
				in.Skip()
				out.EffortValues = nil
			} else {
				if out.EffortValues == nil {
					out.EffortValues = new(StatValues)
				}
				(*out.EffortValues).UnmarshalEasyJSON(in)
			}
		case "gender":
			out.Gender = string(in.String())
		case "ivs":
			if in.IsNull() {
				in.Skip()
				out.IndividualValues = nil
			} else {
				if out.IndividualValues == nil {
					out.IndividualValues = new(StatValues)
				}
				(*out.IndividualValues).UnmarshalEasyJSON(in)
			}
		case "level":
			out.Level = int(in.Int())
		case "happiness":
			out.Happiness = int(in.Int())
		case "hpType":
			out.HPType = string(in.String())
		case "pokeball":
			out.PokeballType = string(in.String())
		case "gigantamax":
			out.GigantaMax = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC3e64b9bEncodeGithubComVoidshardPokeShowdownGoPkgStructs1(out *jwriter.Writer, in PokemonSpec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"species\":"
		out.RawString(prefix)
		out.String(string(in.Species))
	}
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix)
		out.String(string(in.Item))
	}
	{
		const prefix string = ",\"ability\":"
		out.RawString(prefix)
		out.String(string(in.Ability))
	}
	{
		const prefix string = ",\"moves\":"
		out.RawString(prefix)
		if in.Moves == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Moves {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nature\":"
		out.RawString(prefix)
		out.String(string(in.Nature))
	}
	{
		const prefix string = ",\"evs\":"
		out.RawString(prefix)
		if in.EffortValues == nil {
			out.RawString("null")
		} else {
			(*in.EffortValues).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"ivs\":"
		out.RawString(prefix)
		if in.IndividualValues == nil {
			out.RawString("null")
		} else {
			(*in.IndividualValues).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"happiness\":"
		out.RawString(prefix)
		out.Int(int(in.Happiness))
	}
	{
		const prefix string = ",\"hpType\":"
		out.RawString(prefix)
		out.String(string(in.HPType))
	}
	{
		const prefix string = ",\"pokeball\":"
		out.RawString(prefix)
		out.String(string(in.PokeballType))
	}
	{
		const prefix string = ",\"gigantamax\":"
		out.RawString(prefix)
		out.Bool(bool(in.GigantaMax))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PokemonSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC3e64b9bEncodeGithubComVoidshardPokeShowdownGoPkgStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PokemonSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC3e64b9bEncodeGithubComVoidshardPokeShowdownGoPkgStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PokemonSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC3e64b9bDecodeGithubComVoidshardPokeShowdownGoPkgStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PokemonSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC3e64b9bDecodeGithubComVoidshardPokeShowdownGoPkgStructs1(l, v)
}
