// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF642ad3eDecodeGithubComVoidshardPokeShowdownGoPkgStructs(in *jlexer.Lexer, out *Subject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Player":
			out.Player = string(in.String())
		case "Position":
			out.Position = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComVoidshardPokeShowdownGoPkgStructs(out *jwriter.Writer, in Subject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Player\":"
		out.RawString(prefix[1:])
		out.String(string(in.Player))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComVoidshardPokeShowdownGoPkgStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComVoidshardPokeShowdownGoPkgStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComVoidshardPokeShowdownGoPkgStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComVoidshardPokeShowdownGoPkgStructs(l, v)
}
func easyjsonF642ad3eDecodeGithubComVoidshardPokeShowdownGoPkgStructs1(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Magnitude":
			out.Magnitude = int(in.Int())
		case "Subject":
			if in.IsNull() {
				in.Skip()
				out.Subject = nil
			} else {
				if out.Subject == nil {
					out.Subject = new(Subject)
				}
				(*out.Subject).UnmarshalEasyJSON(in)
			}
		case "Targets":
			if in.IsNull() {
				in.Skip()
				out.Targets = nil
			} else {
				in.Delim('[')
				if out.Targets == nil {
					if !in.IsDelim(']') {
						out.Targets = make([]*Subject, 0, 8)
					} else {
						out.Targets = []*Subject{}
					}
				} else {
					out.Targets = (out.Targets)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Subject
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Subject)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Targets = append(out.Targets, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Metadata = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Metadata)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComVoidshardPokeShowdownGoPkgStructs1(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Magnitude\":"
		out.RawString(prefix)
		out.Int(int(in.Magnitude))
	}
	{
		const prefix string = ",\"Subject\":"
		out.RawString(prefix)
		if in.Subject == nil {
			out.RawString("null")
		} else {
			(*in.Subject).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Targets\":"
		out.RawString(prefix)
		if in.Targets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Targets {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Metadata {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComVoidshardPokeShowdownGoPkgStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComVoidshardPokeShowdownGoPkgStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComVoidshardPokeShowdownGoPkgStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComVoidshardPokeShowdownGoPkgStructs1(l, v)
}
