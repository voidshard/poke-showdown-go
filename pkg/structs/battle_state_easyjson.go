// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson219bd14DecodeGithubComVoidshardPokeShowdownGoPkgStructs(in *jlexer.Lexer, out *BattleState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Field = make(map[string]*Update)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *Update
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Update)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Field)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Winner":
			out.Winner = string(in.String())
		case "Turn":
			out.Turn = int(in.Int())
		case "Events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]*Event, 0, 8)
					} else {
						out.Events = []*Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *Event
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(Event)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Events = append(out.Events, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson219bd14EncodeGithubComVoidshardPokeShowdownGoPkgStructs(out *jwriter.Writer, in BattleState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Field\":"
		out.RawString(prefix[1:])
		if in.Field == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Field {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				if v3Value == nil {
					out.RawString("null")
				} else {
					(*v3Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Winner\":"
		out.RawString(prefix)
		out.String(string(in.Winner))
	}
	{
		const prefix string = ",\"Turn\":"
		out.RawString(prefix)
		out.Int(int(in.Turn))
	}
	{
		const prefix string = ",\"Events\":"
		out.RawString(prefix)
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Events {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BattleState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson219bd14EncodeGithubComVoidshardPokeShowdownGoPkgStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BattleState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson219bd14EncodeGithubComVoidshardPokeShowdownGoPkgStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BattleState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson219bd14DecodeGithubComVoidshardPokeShowdownGoPkgStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BattleState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson219bd14DecodeGithubComVoidshardPokeShowdownGoPkgStructs(l, v)
}
