// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs(in *jlexer.Lexer, out *rawUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wait":
			out.Wait = bool(in.Bool())
		case "forceSwitch":
			if in.IsNull() {
				in.Skip()
				out.ForceSwitch = nil
			} else {
				in.Delim('[')
				if out.ForceSwitch == nil {
					if !in.IsDelim(']') {
						out.ForceSwitch = make([]bool, 0, 64)
					} else {
						out.ForceSwitch = []bool{}
					}
				} else {
					out.ForceSwitch = (out.ForceSwitch)[:0]
				}
				for !in.IsDelim(']') {
					var v1 bool
					v1 = bool(in.Bool())
					out.ForceSwitch = append(out.ForceSwitch, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "active":
			if in.IsNull() {
				in.Skip()
				out.Active = nil
			} else {
				in.Delim('[')
				if out.Active == nil {
					if !in.IsDelim(']') {
						out.Active = make([]*activeData, 0, 8)
					} else {
						out.Active = []*activeData{}
					}
				} else {
					out.Active = (out.Active)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *activeData
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(activeData)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Active = append(out.Active, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "side":
			(out.Team).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs(out *jwriter.Writer, in rawUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wait\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Wait))
	}
	{
		const prefix string = ",\"forceSwitch\":"
		out.RawString(prefix)
		if in.ForceSwitch == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.ForceSwitch {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		if in.Active == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Active {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		(in.Team).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rawUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rawUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rawUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rawUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs(l, v)
}
func easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs1(in *jlexer.Lexer, out *rawTeam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Player = string(in.String())
		case "pokemon":
			if in.IsNull() {
				in.Skip()
				out.Pokemon = nil
			} else {
				in.Delim('[')
				if out.Pokemon == nil {
					if !in.IsDelim(']') {
						out.Pokemon = make([]*Pokemon, 0, 8)
					} else {
						out.Pokemon = []*Pokemon{}
					}
				} else {
					out.Pokemon = (out.Pokemon)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Pokemon
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Pokemon)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Pokemon = append(out.Pokemon, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs1(out *jwriter.Writer, in rawTeam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Player))
	}
	{
		const prefix string = ",\"pokemon\":"
		out.RawString(prefix)
		if in.Pokemon == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Pokemon {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v rawTeam) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v rawTeam) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *rawTeam) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *rawTeam) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs1(l, v)
}
func easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs2(in *jlexer.Lexer, out *activeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ident":
			out.Ident = string(in.String())
		case "moves":
			if in.IsNull() {
				in.Skip()
				out.Move = nil
			} else {
				in.Delim('[')
				if out.Move == nil {
					if !in.IsDelim(']') {
						out.Move = make([]*Move, 0, 8)
					} else {
						out.Move = []*Move{}
					}
				} else {
					out.Move = (out.Move)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *Move
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(Move)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Move = append(out.Move, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "canZMove":
			if in.IsNull() {
				in.Skip()
				out.ZMove = nil
			} else {
				in.Delim('[')
				if out.ZMove == nil {
					if !in.IsDelim(']') {
						out.ZMove = make([]*Move, 0, 8)
					} else {
						out.ZMove = []*Move{}
					}
				} else {
					out.ZMove = (out.ZMove)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *Move
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(Move)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.ZMove = append(out.ZMove, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "canDynamax":
			out.CanDynamax = bool(in.Bool())
		case "canMegaEvo":
			out.CanMegaEvolve = bool(in.Bool())
		case "maxMoves":
			easyjson2d86586fDecode(in, &out.Dynamax)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs2(out *jwriter.Writer, in activeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Ident\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ident))
	}
	{
		const prefix string = ",\"moves\":"
		out.RawString(prefix)
		if in.Move == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Move {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"canZMove\":"
		out.RawString(prefix)
		if in.ZMove == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.ZMove {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"canDynamax\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanDynamax))
	}
	{
		const prefix string = ",\"canMegaEvo\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanMegaEvolve))
	}
	{
		const prefix string = ",\"maxMoves\":"
		out.RawString(prefix)
		easyjson2d86586fEncode(out, in.Dynamax)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v activeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v activeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *activeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *activeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs2(l, v)
}
func easyjson2d86586fDecode(in *jlexer.Lexer, out *struct {
	Moves []*Move `json:"maxMoves"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxMoves":
			if in.IsNull() {
				in.Skip()
				out.Moves = nil
			} else {
				in.Delim('[')
				if out.Moves == nil {
					if !in.IsDelim(']') {
						out.Moves = make([]*Move, 0, 8)
					} else {
						out.Moves = []*Move{}
					}
				} else {
					out.Moves = (out.Moves)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *Move
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(Move)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Moves = append(out.Moves, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncode(out *jwriter.Writer, in struct {
	Moves []*Move `json:"maxMoves"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"maxMoves\":"
		out.RawString(prefix[1:])
		if in.Moves == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Moves {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs3(in *jlexer.Lexer, out *Update) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "player":
			out.Player = string(in.String())
		case "wait":
			out.Wait = bool(in.Bool())
		case "forceSwitch":
			if in.IsNull() {
				in.Skip()
				out.ForceSwitch = nil
			} else {
				in.Delim('[')
				if out.ForceSwitch == nil {
					if !in.IsDelim(']') {
						out.ForceSwitch = make([]bool, 0, 64)
					} else {
						out.ForceSwitch = []bool{}
					}
				} else {
					out.ForceSwitch = (out.ForceSwitch)[:0]
				}
				for !in.IsDelim(']') {
					var v19 bool
					v19 = bool(in.Bool())
					out.ForceSwitch = append(out.ForceSwitch, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Active":
			if in.IsNull() {
				in.Skip()
				out.Active = nil
			} else {
				in.Delim('[')
				if out.Active == nil {
					if !in.IsDelim(']') {
						out.Active = make([]int, 0, 8)
					} else {
						out.Active = []int{}
					}
				} else {
					out.Active = (out.Active)[:0]
				}
				for !in.IsDelim(']') {
					var v20 int
					v20 = int(in.Int())
					out.Active = append(out.Active, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pokemon":
			if in.IsNull() {
				in.Skip()
				out.Pokemon = nil
			} else {
				in.Delim('[')
				if out.Pokemon == nil {
					if !in.IsDelim(']') {
						out.Pokemon = make([]*Pokemon, 0, 8)
					} else {
						out.Pokemon = []*Pokemon{}
					}
				} else {
					out.Pokemon = (out.Pokemon)[:0]
				}
				for !in.IsDelim(']') {
					var v21 *Pokemon
					if in.IsNull() {
						in.Skip()
						v21 = nil
					} else {
						if v21 == nil {
							v21 = new(Pokemon)
						}
						(*v21).UnmarshalEasyJSON(in)
					}
					out.Pokemon = append(out.Pokemon, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs3(out *jwriter.Writer, in Update) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"player\":"
		out.RawString(prefix[1:])
		out.String(string(in.Player))
	}
	{
		const prefix string = ",\"wait\":"
		out.RawString(prefix)
		out.Bool(bool(in.Wait))
	}
	{
		const prefix string = ",\"forceSwitch\":"
		out.RawString(prefix)
		if in.ForceSwitch == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.ForceSwitch {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v23))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Active\":"
		out.RawString(prefix)
		if in.Active == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Active {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pokemon\":"
		out.RawString(prefix)
		if in.Pokemon == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Pokemon {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Update) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Update) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Update) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Update) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs3(l, v)
}
func easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs4(in *jlexer.Lexer, out *Pokemon) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ident":
			out.Ident = string(in.String())
		case "active":
			out.Active = bool(in.Bool())
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				if out.Options == nil {
					out.Options = new(Options)
				}
				(*out.Options).UnmarshalEasyJSON(in)
			}
		case "stats":
			if in.IsNull() {
				in.Skip()
				out.Stats = nil
			} else {
				if out.Stats == nil {
					out.Stats = new(StatValues)
				}
				(*out.Stats).UnmarshalEasyJSON(in)
			}
		case "moves":
			if in.IsNull() {
				in.Skip()
				out.Moves = nil
			} else {
				in.Delim('[')
				if out.Moves == nil {
					if !in.IsDelim(']') {
						out.Moves = make([]string, 0, 4)
					} else {
						out.Moves = []string{}
					}
				} else {
					out.Moves = (out.Moves)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Moves = append(out.Moves, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "baseAbility":
			out.BaseAbility = string(in.String())
		case "ability":
			out.Ability = string(in.String())
		case "item":
			out.Item = string(in.String())
		case "pokeball":
			out.Pokeball = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(DerivedData)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "details":
			out.Details = string(in.String())
		case "condition":
			out.Condition = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs4(out *jwriter.Writer, in Pokemon) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ident\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ident))
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Bool(bool(in.Active))
	}
	{
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		if in.Options == nil {
			out.RawString("null")
		} else {
			(*in.Options).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stats\":"
		out.RawString(prefix)
		if in.Stats == nil {
			out.RawString("null")
		} else {
			(*in.Stats).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"moves\":"
		out.RawString(prefix)
		if in.Moves == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Moves {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"baseAbility\":"
		out.RawString(prefix)
		out.String(string(in.BaseAbility))
	}
	{
		const prefix string = ",\"ability\":"
		out.RawString(prefix)
		out.String(string(in.Ability))
	}
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix)
		out.String(string(in.Item))
	}
	{
		const prefix string = ",\"pokeball\":"
		out.RawString(prefix)
		out.String(string(in.Pokeball))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil {
			out.RawString("null")
		} else {
			(*in.Data).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		out.String(string(in.Details))
	}
	{
		const prefix string = ",\"condition\":"
		out.RawString(prefix)
		out.String(string(in.Condition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pokemon) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pokemon) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pokemon) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pokemon) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs4(l, v)
}
func easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs5(in *jlexer.Lexer, out *Options) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CanMegaEvolve":
			out.CanMegaEvolve = bool(in.Bool())
		case "CanDynamax":
			out.CanDynamax = bool(in.Bool())
		case "CanZMove":
			out.CanZMove = bool(in.Bool())
		case "Moves":
			if in.IsNull() {
				in.Skip()
				out.Moves = nil
			} else {
				in.Delim('[')
				if out.Moves == nil {
					if !in.IsDelim(']') {
						out.Moves = make([]*Move, 0, 8)
					} else {
						out.Moves = []*Move{}
					}
				} else {
					out.Moves = (out.Moves)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *Move
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(Move)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.Moves = append(out.Moves, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ZMoves":
			if in.IsNull() {
				in.Skip()
				out.ZMoves = nil
			} else {
				in.Delim('[')
				if out.ZMoves == nil {
					if !in.IsDelim(']') {
						out.ZMoves = make([]*Move, 0, 8)
					} else {
						out.ZMoves = []*Move{}
					}
				} else {
					out.ZMoves = (out.ZMoves)[:0]
				}
				for !in.IsDelim(']') {
					var v32 *Move
					if in.IsNull() {
						in.Skip()
						v32 = nil
					} else {
						if v32 == nil {
							v32 = new(Move)
						}
						(*v32).UnmarshalEasyJSON(in)
					}
					out.ZMoves = append(out.ZMoves, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DMoves":
			if in.IsNull() {
				in.Skip()
				out.DMoves = nil
			} else {
				in.Delim('[')
				if out.DMoves == nil {
					if !in.IsDelim(']') {
						out.DMoves = make([]*Move, 0, 8)
					} else {
						out.DMoves = []*Move{}
					}
				} else {
					out.DMoves = (out.DMoves)[:0]
				}
				for !in.IsDelim(']') {
					var v33 *Move
					if in.IsNull() {
						in.Skip()
						v33 = nil
					} else {
						if v33 == nil {
							v33 = new(Move)
						}
						(*v33).UnmarshalEasyJSON(in)
					}
					out.DMoves = append(out.DMoves, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs5(out *jwriter.Writer, in Options) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CanMegaEvolve\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.CanMegaEvolve))
	}
	{
		const prefix string = ",\"CanDynamax\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanDynamax))
	}
	{
		const prefix string = ",\"CanZMove\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanZMove))
	}
	{
		const prefix string = ",\"Moves\":"
		out.RawString(prefix)
		if in.Moves == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Moves {
				if v34 > 0 {
					out.RawByte(',')
				}
				if v35 == nil {
					out.RawString("null")
				} else {
					(*v35).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ZMoves\":"
		out.RawString(prefix)
		if in.ZMoves == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.ZMoves {
				if v36 > 0 {
					out.RawByte(',')
				}
				if v37 == nil {
					out.RawString("null")
				} else {
					(*v37).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DMoves\":"
		out.RawString(prefix)
		if in.DMoves == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.DMoves {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					(*v39).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Options) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Options) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Options) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Options) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs5(l, v)
}
func easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs6(in *jlexer.Lexer, out *Move) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "move":
			out.Name = string(in.String())
		case "target":
			out.Target = string(in.String())
		case "pp":
			out.PP = int(in.Int())
		case "maxpp":
			out.MaxPP = int(in.Int())
		case "disabled":
			out.Disabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs6(out *jwriter.Writer, in Move) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"move\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"pp\":"
		out.RawString(prefix)
		out.Int(int(in.PP))
	}
	{
		const prefix string = ",\"maxpp\":"
		out.RawString(prefix)
		out.Int(int(in.MaxPP))
	}
	{
		const prefix string = ",\"disabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Disabled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Move) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Move) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Move) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Move) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs6(l, v)
}
func easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs7(in *jlexer.Lexer, out *DerivedData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Species":
			out.Species = string(in.String())
		case "Level":
			out.Level = int(in.Int())
		case "Shiny":
			out.Shiny = bool(in.Bool())
		case "Gender":
			out.Gender = string(in.String())
		case "HPNow":
			out.HPNow = int(in.Int())
		case "HPMax":
			out.HPMax = int(in.Int())
		case "IsAsleep":
			out.IsAsleep = bool(in.Bool())
		case "IsBurned":
			out.IsBurned = bool(in.Bool())
		case "IsPoisoned":
			out.IsPoisoned = bool(in.Bool())
		case "IsToxiced":
			out.IsToxiced = bool(in.Bool())
		case "IsFrozen":
			out.IsFrozen = bool(in.Bool())
		case "IsParalyzed":
			out.IsParalyzed = bool(in.Bool())
		case "IsFainted":
			out.IsFainted = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs7(out *jwriter.Writer, in DerivedData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Species\":"
		out.RawString(prefix[1:])
		out.String(string(in.Species))
	}
	{
		const prefix string = ",\"Level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"Shiny\":"
		out.RawString(prefix)
		out.Bool(bool(in.Shiny))
	}
	{
		const prefix string = ",\"Gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"HPNow\":"
		out.RawString(prefix)
		out.Int(int(in.HPNow))
	}
	{
		const prefix string = ",\"HPMax\":"
		out.RawString(prefix)
		out.Int(int(in.HPMax))
	}
	{
		const prefix string = ",\"IsAsleep\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAsleep))
	}
	{
		const prefix string = ",\"IsBurned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBurned))
	}
	{
		const prefix string = ",\"IsPoisoned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPoisoned))
	}
	{
		const prefix string = ",\"IsToxiced\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsToxiced))
	}
	{
		const prefix string = ",\"IsFrozen\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFrozen))
	}
	{
		const prefix string = ",\"IsParalyzed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsParalyzed))
	}
	{
		const prefix string = ",\"IsFainted\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFainted))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DerivedData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DerivedData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2d86586fEncodeGithubComVoidshardPokeShowdownGoPkgStructs7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DerivedData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DerivedData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2d86586fDecodeGithubComVoidshardPokeShowdownGoPkgStructs7(l, v)
}
